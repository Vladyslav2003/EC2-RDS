name: "Terraform"
 
on:
 push:
   branches:
   - main
   paths:
   - terraform/**
 pull_request:
   branches:
   - main
   paths:
   - terraform/**
 
 workflow_dispatch:
    inputs:
      number_of_instances:
        description: 'number_of_instances'
        required: true
        type: number


jobs:
 terraform:
   name: "Terraform"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       working-directory: ./terraform
 
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.0
    
     - name: Terraform init
       id: init
       run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
 
     - name: Terraform format
       id: fmt
       run: terraform fmt -check
    
     - name: Terraform validate
       id: validate
       run: terraform validate
 
     - name: Terraform plan
       id: plan
       if: github.event_name == 'pull_request'
       run: terraform plan -no-color -input=false
       continue-on-error: true
    
     - uses: actions/github-script@v6
       if: github.event_name == 'pull_request'
       env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
       with:
         script: |
           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
 
           <details><summary>Show Plan</summary>
 
           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`
 
           </details>
           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })
 
     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1
 
     - name: Terraform Apply
       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
       run: terraform apply -auto-approve -input=false



# name: "Terraform"

# on:
#   push:
#     branches:
#       - main
#   pull_request:

#   workflow_dispatch:
#     inputs:
#       number_of_instances:
#         description: 'number_of_instances'
#         required: true
#         type: number

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     permissions:
#       pull-requests: write
#     env:
#       TF_VAR_number_of_instances: ${{ inputs.number_of_instances }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Terraform Init
#         id: init
#         run: terraform init

#       - name: Terraform Plan
#         id: Plan
#         run: terraform plan

#   terraform_apply:
#     name: "Terraform Apply"
#     runs-on: ubuntu-latest
#     needs: terraform
#     environment:
#       name: prod
#     env:
#      TF_VAR_number_of_instances: ${{ inputs.number_of_instances }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Terraform Apply
#         run: terraform apply

# name: "Terraform Menu"

# on:
#   workflow_dispatch:
#     inputs:
#       menu-option:
#        description: "Select an option"
#          required: true
#          default: "plan"
#          options:
#           - "plan"
#           - "apply"
#           - "destroy"

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     permissions:
#       pull-requests: write
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Terraform Init
#         run: terraform init

#       - name: Set Terraform Action
#         id: set-terraform-action
#         run: echo "echo ::set-output name=terraform_action::${{ github.event.inputs.menu-option }}"

#   apply_or_destroy:
#     name: "Apply or Destroy"
#     runs-on: ubuntu-latest
#     needs: terraform
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Terraform Apply or Destroy
#         run: terraform ${{ needs.terraform.outputs.terraform_action }}
